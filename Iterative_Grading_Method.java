//EXPERIMENT 2
package matLab_Simulation_Experiments;
import java.util.ArrayList;
public class Iterative_Grading_Method {
	public static void main(String[] args) {
		System.out.println("EXPERIMENT 2");
		System.out.println("ITERATIVE GRADIENT METHOD\n");
		float lambda=0;
		float deltaLambda=0; 
		int powerDemand=800;                                     //load demand
		float p=0; 
		float totalpower=0;
		System.out.println("matrix for given problem statement:-");
		float[][] FC= {{0.004f,5.3f,500},{0.006f,5.5f,400},{0.009f,5.8f,200}}; //create matrix
		for(int i=0;i<FC.length;i++) {
			for(int j=0;j<FC[0].length;j++) {                                  //printing matrix
				System.out.print("  "+FC[i][j]);
			}
			System.out.println();
		}
		int N_gen=FC.length;                                                   //no. of generators
		ArrayList<Float> fuelCost=new ArrayList<>();                            //arrayList to store fuelCost
		for(int i=0;i<N_gen;i++) {    
			fuelCost.add(null);
		}
		ArrayList<Float> power= new ArrayList<>();                              //arrayList to store powers of generators
		for(int i=0;i<N_gen;i++) {
			power.add(null);
		}
//		System.out.println();   
		float bmax=0;                                                          //determining maximum b value from matrix
		for(int i=0;i<FC[0].length;i++) {
			int j=1;
				if(FC[i][j]>bmax) {
					bmax=FC[i][j];
				}
		}
//		System.out.println("max value of b is: "+max);            
		System.out.println();
		float power_mismatch=powerDemand-totalpower;
		float abs=power_mismatch;
	    //WHILE LOOP 
		while(abs>0.001) {                                         //starting to loop the operation
//		System.out.println();
		lambda=bmax+deltaLambda;
		
		          
        for(int i=0;i<FC[0].length;i++) {                                     //powers of individual generators
        		p=(lambda-FC[i][1])/(2*FC[i][0]); 		
        		power.set(i,p);
        }
		totalpower=0;                                                    //addition of total power by the generators
		for(Float i:power) {
			totalpower=totalpower+i;
		}
		power_mismatch=powerDemand-(totalpower);
		float sum=0;                                                           //Arithmetic operation of denominator value
		for(int i=0;i<N_gen;i++) {
			sum += (1/(2*FC[i][0]));	
		}	
		deltaLambda= power_mismatch/(sum);                                     //determination of delta lambda
		for(int i=0;i<FC.length;i++) {                                        //fuel cost of individual generators
			fuelCost.set(i,FC[i][0]*power.get(i)*power.get(i)+FC[i][1]*power.get(i)+FC[i][2]);
		}
        abs=Math.abs(power_mismatch);
        //END OF WHILE LOOP
		}                  
        System.out.println("power to be generated by individual generators is:-");
    	for(int i=0;i<N_gen;i++) {
			System.out.print("p"+(i+1));
			System.out.println(": "+power.get(i));
		}
		System.out.println();
		System.out.println("economic fuel cost of each generators is:- ");
        for(int i=0;i<N_gen;i++) {
           	System.out.print("F"+(i+1));
           	System.out.println(": "+fuelCost.get(i));
        }
        float totalFuel=0;
        for(Float i:fuelCost) {
           	totalFuel+=i;
        }
        System.out.println();
        System.out.println("total fuel cost is: "+totalFuel);
        System.out.println("incremental cost: "+lambda);
	    } 
    }